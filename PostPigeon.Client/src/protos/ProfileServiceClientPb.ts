/**
 * @fileoverview gRPC-Web generated client stub for profile
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.1
// source: profile.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_pb from './common_pb';
import * as profile_pb from './profile_pb';


export class ProfilesClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetProfile = new grpcWeb.MethodDescriptor(
    '/profile.Profiles/GetProfile',
    grpcWeb.MethodType.UNARY,
    profile_pb.GetProfileRequest,
    profile_pb.Profile,
    (request: profile_pb.GetProfileRequest) => {
      return request.serializeBinary();
    },
    profile_pb.Profile.deserializeBinary
  );

  getProfile(
    request: profile_pb.GetProfileRequest,
    metadata: grpcWeb.Metadata | null): Promise<profile_pb.Profile>;

  getProfile(
    request: profile_pb.GetProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: profile_pb.Profile) => void): grpcWeb.ClientReadableStream<profile_pb.Profile>;

  getProfile(
    request: profile_pb.GetProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: profile_pb.Profile) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profile.Profiles/GetProfile',
        request,
        metadata || {},
        this.methodDescriptorGetProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profile.Profiles/GetProfile',
    request,
    metadata || {},
    this.methodDescriptorGetProfile);
  }

  methodDescriptorGetProfiles = new grpcWeb.MethodDescriptor(
    '/profile.Profiles/GetProfiles',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.None,
    profile_pb.ProfilesList,
    (request: common_pb.None) => {
      return request.serializeBinary();
    },
    profile_pb.ProfilesList.deserializeBinary
  );

  getProfiles(
    request: common_pb.None,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<profile_pb.ProfilesList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/profile.Profiles/GetProfiles',
      request,
      metadata || {},
      this.methodDescriptorGetProfiles);
  }

  methodDescriptorUpdateProfile = new grpcWeb.MethodDescriptor(
    '/profile.Profiles/UpdateProfile',
    grpcWeb.MethodType.UNARY,
    profile_pb.UpdateProfileRequest,
    common_pb.None,
    (request: profile_pb.UpdateProfileRequest) => {
      return request.serializeBinary();
    },
    common_pb.None.deserializeBinary
  );

  updateProfile(
    request: profile_pb.UpdateProfileRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.None>;

  updateProfile(
    request: profile_pb.UpdateProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.None) => void): grpcWeb.ClientReadableStream<common_pb.None>;

  updateProfile(
    request: profile_pb.UpdateProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.None) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profile.Profiles/UpdateProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profile.Profiles/UpdateProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateProfile);
  }

  methodDescriptorChangeAvatar = new grpcWeb.MethodDescriptor(
    '/profile.Profiles/ChangeAvatar',
    grpcWeb.MethodType.UNARY,
    profile_pb.ChangeAvatarRequest,
    common_pb.None,
    (request: profile_pb.ChangeAvatarRequest) => {
      return request.serializeBinary();
    },
    common_pb.None.deserializeBinary
  );

  changeAvatar(
    request: profile_pb.ChangeAvatarRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.None>;

  changeAvatar(
    request: profile_pb.ChangeAvatarRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.None) => void): grpcWeb.ClientReadableStream<common_pb.None>;

  changeAvatar(
    request: profile_pb.ChangeAvatarRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.None) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/profile.Profiles/ChangeAvatar',
        request,
        metadata || {},
        this.methodDescriptorChangeAvatar,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/profile.Profiles/ChangeAvatar',
    request,
    metadata || {},
    this.methodDescriptorChangeAvatar);
  }

}

